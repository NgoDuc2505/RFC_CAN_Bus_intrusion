import os
import struct
import pandas as pd
from collections import Counter

# ====================== C·∫§U H√åNH ======================
FEATURE_MAPPING = {
    0x00: 'arbitration_id',
    0x01: 'inter_arrival_time',
    0x0A: 'data_entropy',
    0x0B: 'dls',
    0xFF: 'none'
}

BIN_DIR = "src/LUT"
NUM_TREES = 48  # S·ªë l∆∞·ª£ng c√¢y trong r·ª´ng
# =======================================================

# ================== CHUY·ªÇN ƒê·ªîI CSV -> BIN ==============
def convert_csv_to_bin(csv_path, bin_path):
    """Chuy·ªÉn ƒë·ªïi file CSV c√¢y quy·∫øt ƒë·ªãnh sang binary format"""
    df = pd.read_csv(csv_path)
    df.columns = df.columns.str.strip()

    with open(bin_path, 'wb') as f:
        for _, row in df.iterrows():
            # X·ª≠ l√Ω c√°c gi√° tr·ªã
            node = int(row['Node'])
            feature = int(float(row['Feature'])) if not pd.isna(row['Feature']) else 0xFF
            
            # X·ª≠ l√Ω threshold
            threshold = float(row['Threshold']) if not pd.isna(row['Threshold']) else 0.0
            
            # X·ª≠ l√Ω node con
            left = int(float(row['Left_Child'])) if not pd.isna(row['Left_Child']) else 0
            right = int(float(row['Right_Child'])) if not pd.isna(row['Right_Child']) else 0
            
            # X·ª≠ l√Ω prediction (QUAN TR·ªåNG)
            pred_raw = str(row['Prediction']).strip().upper()
            if pred_raw == 'FF':
                prediction = 0xFF  # 255 - N√∫t trong
            else:
                prediction = int(float(pred_raw))  # 0 ho·∫∑c 1 - N√∫t l√°
                if prediction not in (0, 1):
                    raise ValueError(f"Gi√° tr·ªã prediction kh√¥ng h·ª£p l·ªá: {pred_raw}")

            # ƒê√≥ng g√≥i d·ªØ li·ªáu (16 bytes/node)
            packed = struct.pack(
                '<HBfHHB',  # Format: uint16, uint8, float32, uint16, uint16, uint8
                node,
                feature,
                threshold,
                left,
                right,
                prediction
            )
            packed += bytes(4)  # Padding ƒë·ªÉ ƒë·ªß 16 bytes
            f.write(packed)
    
    print(f"‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi {csv_path} -> {bin_path}")

def convert_all_csv_to_bin():
    """Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ c√°c file CSV trong th∆∞ m·ª•c"""
    for i in range(NUM_TREES):
        csv_path = os.path.join(BIN_DIR, f"tree_{i}.csv")
        bin_path = os.path.join(BIN_DIR, f"tree_{i}.bin")
        if os.path.exists(csv_path):
            convert_csv_to_bin(csv_path, bin_path)
        else:
            print(f"‚ö†Ô∏è File {csv_path} kh√¥ng t·ªìn t·∫°i")
# =======================================================

# ================ ƒê·ªåC V√Ä D·ª∞ ƒêO√ÅN T·ª™ BIN ================
def load_bin_tree(bin_path):
    """ƒê·ªçc v√† parse c√¢y t·ª´ file binary"""
    nodes = {}
    with open(bin_path, 'rb') as f:
        while True:
            data = f.read(16)  # M·ªói node 16 bytes
            if not data or len(data) < 16:
                break
                
            # Gi·∫£i m√£ struct
            node_id, feature, threshold, left, right, pred = struct.unpack('<HBfHHB', data[:12])
            
            nodes[node_id] = {
                'feature': feature,
                'threshold': threshold,
                'left': left,
                'right': right,
                'prediction': pred
            }
    return nodes

def predict_from_bin_tree(tree_nodes, input_data, verbose=False):
    """D·ª± ƒëo√°n t·ª´ m·ªôt c√¢y binary"""
    current_node = 0  # B·∫Øt ƒë·∫ßu t·ª´ node g·ªëc
    
    while True:
        node = tree_nodes.get(current_node)
        if not node:
            if verbose:
                print(f"‚ùå Node {current_node} kh√¥ng t·ªìn t·∫°i")
            return None
        
        # N·∫øu l√† n√∫t l√° (prediction kh√°c 0xFF)
        if node['prediction'] != 0xFF:
            if verbose:
                print(f"‚úÖ Node {current_node}: Prediction = {node['prediction']}")
            return node['prediction']
        
        # L·∫•y t√™n feature
        feature_name = FEATURE_MAPPING.get(node['feature'], 'unknown')
        feature_value = input_data.get(feature_name, float('nan'))
        
        if verbose:
            comp = "<=" if feature_value <= node['threshold'] else "> "
            print(f"üß† Node {current_node}: {feature_name} ({feature_value:.5f}) {comp} {node['threshold']:.5f}")
        
        # Di chuy·ªÉn ƒë·∫øn node con
        current_node = node['left'] if feature_value <= node['threshold'] else node['right']

def vote_predictions_bin(bin_trees, input_data, verbose=False):
    """D·ª± ƒëo√°n b·∫±ng voting t·ª´ nhi·ªÅu c√¢y binary"""
    predictions = []
    
    for tree_path in bin_trees:
        if verbose:
            print(f"\n=> ƒêang x·ª≠ l√Ω {os.path.basename(tree_path)}")
            
        tree_nodes = load_bin_tree(tree_path)
        pred = predict_from_bin_tree(tree_nodes, input_data, verbose)
        
        if pred is not None:
            predictions.append(pred)
        elif verbose:
            print("‚ö†Ô∏è B·ªè qua c√¢y do l·ªói d·ª± ƒëo√°n")
    
    if not predictions:
        return None, Counter()
    
    # Th·ª±c hi·ªán voting
    prediction_counts = Counter(predictions)
    voted_prediction = prediction_counts.most_common(1)[0][0]
    
    return voted_prediction, prediction_counts
# =======================================================

# ====================== MAIN ===========================
if __name__ == "__main__":
    # B∆∞·ªõc 1: Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ CSV sang BIN (n·∫øu c·∫ßn)
    convert_all_csv_to_bin()
    
    # B∆∞·ªõc 2: Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o
    sample_input = {
        'arbitration_id': 977,
        'inter_arrival_time': 0.02,
        'data_entropy': 1.549,
        'dls': 8,
    }
    
    # B∆∞·ªõc 3: T·∫°o danh s√°ch c√°c file .bin
    bin_trees = [os.path.join(BIN_DIR, f"tree_{i}.bin") for i in range(NUM_TREES)]
    
    # B∆∞·ªõc 4: Th·ª±c hi·ªán d·ª± ƒëo√°n
    voted_pred, counts = vote_predictions_bin(bin_trees, sample_input, verbose=True)
    
    # B∆∞·ªõc 5: Hi·ªÉn th·ªã k·∫øt qu·∫£
    print("\n" + "="*50)
    print(f"üßæ K·∫øt qu·∫£ d·ª± ƒëo√°n cu·ªëi c√πng: {voted_pred} (0: B√¨nh th∆∞·ªùng, 1: T·∫•n c√¥ng)")
    print(f"üìä Th·ªëng k√™ vote: {dict(counts)}")
    print("="*50)