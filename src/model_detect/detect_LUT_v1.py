import pandas as pd
from collections import Counter

# √Ånh x·∫° ch·ªâ s·ªë feature sang t√™n c·ªôt
feature_index_to_name = {
    '00': "timestamp",
    '01': 'arbitration_id',
    '10': 'data_field',
    '-1': 'None'
}

def convert_timestamp(ts):
    try:
        return float(ts)
    except:
        return 0.0


def preprocess_data(df):
    df = df.copy()
    df['timestamp'] = df['timestamp'].apply(convert_timestamp)
    for col in ['arbitration_id', 'data_field']:
        if df[col].dtype == object:
            df[col] = df[col].apply(lambda x: int(x, 16) if isinstance(x, str) else x)
    return df

def preprocess_data_dict(data_dict):
    data_dict = data_dict.copy()
    data_dict['timestamp'] = convert_timestamp(data_dict['timestamp'])
    for col in ['arbitration_id', 'data_field']:
        if isinstance(data_dict[col], str):
            data_dict[col] = int(data_dict[col], 16)
            # if data_dict[col].dtype == object:
            #     data_dict[col] = data_dict[col].apply(lambda x: int(x, 16) if isinstance(x, str) else x)
    return data_dict

# H√†m ƒë·ªçc LUT t·ª´ file CSV
def load_tree_from_csv(csv_path):
    df = pd.read_csv(csv_path)
    df = preprocess_data(df)  # Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
    df.columns = df.columns.str.strip()  # X√≥a kho·∫£ng tr·∫Øng
    return df

# H√†m d·ª± ƒëo√°n gi·ªëng random forest d·ª±a tr√™n c√¢y
def predict_from_tree(tree_df, input_data, verbose=False):
    node = 0
    while True:
        # matches = tree_df[tree_df['Node'] == node]
        matches = tree_df['Node'] == node
        if matches.empty:
            if verbose:
                print(f"‚ùå Node {node} kh√¥ng t·ªìn t·∫°i.")
            return None
        row = matches.iloc[0]
        
        # Ki·ªÉm tra n·∫øu l√† n√∫t l√° (Feature l√† NaN ho·∫∑c -1)
        is_leaf = pd.isna(row['Feature']) or row['Feature'] == -1
        # is_leaf = row['Feature'] == -1
        feature_name = None if is_leaf else feature_index_to_name.get(row['Feature'], None)
        
        if is_leaf:
            # N·∫øu l√† n√∫t l√°, tr·∫£ v·ªÅ prediction
            if verbose:
                print(f"‚úÖ Node {node} l√† node l√°. Prediction = {row['Prediction']}")
            return row['Prediction']

        # N·∫øu kh√¥ng ph·∫£i n√∫t l√°, ti·∫øp t·ª•c so s√°nh
        threshold = row['Threshold']   # Fixed-point Q12.20
        if feature_name is not None:
            feature_value = input_data.get(feature_name)
            if feature_value is None:
                if verbose:
                    print(f"‚ùå Feature '{feature_name}' kh√¥ng t·ªìn t·∫°i trong input.")
                return None

            if verbose:
                print(f"üß† Node {node}: {feature_name} ({feature_value}) "
                      f"{'<= ' if feature_value <= threshold else '>  '} {threshold}")

            if feature_value <= threshold:
                node = row['Left_Child']
            else:
                node = row['Right_Child']


# H√†m th·ª±c hi·ªán voting t·ª´ c√°c c√¢y
def vote_predictions(trees, input_data, verbose=False):
    predictions = []
    input_data = preprocess_data_dict(input_data)  # Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o
    for tree_path in trees:
        tree_df = load_tree_from_csv(tree_path)
        print(f"\n=>{tree_path}")
        pred = predict_from_tree(tree_df, input_data, verbose=verbose)
        predictions.append(pred)

    # Th·ª±c hi·ªán voting (b·ªè phi·∫øu), n·∫øu phi·∫øu 0 nhi·ªÅu h∆°n, d·ª± ƒëo√°n l√† 0, ng∆∞·ª£c l·∫°i l√† 1
    prediction_counts = Counter(predictions)
    voted_prediction = prediction_counts.most_common(1)[0][0]  # L·∫•y d·ª± ƒëo√°n ph·ªï bi·∫øn nh·∫•t

    return voted_prediction, prediction_counts

# Main ch·∫°y nh∆∞ b·∫°n y√™u c·∫ßu
if __name__ == "__main__":
    # C√°c c√¢y m√† b·∫°n mu·ªën d·ª± ƒëo√°n (tree_0 ƒë·∫øn tree_16)
    trees = [f"src/LUT/tree_{i}.csv" for i in range(21)]

    # D·ªØ li·ªáu ƒë·∫ßu v√†o
    sample_input_0 = {
        'timestamp': 1672531200, 'arbitration_id': '191', 'data_field': "8409A80D004108",
    }

    sample_input_1 = {
         'timestamp': 1672531286.901432, 'arbitration_id': '0C1', 'data_field': "0000000000000000",
    }
    # Th·ª±c hi·ªán voting v√† l·∫•y k·∫øt qu·∫£
    voted_prediction, prediction_counts = vote_predictions(trees, sample_input_0, verbose=True)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print(f"\nüßæ Final Voted Prediction: {voted_prediction} (0: Normal, 1: Attack)")
    print(f"Votes: {prediction_counts}")

