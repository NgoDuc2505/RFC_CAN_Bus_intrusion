import pandas as pd
from collections import Counter

# √Ånh x·∫° ch·ªâ s·ªë feature sang t√™n c·ªôt
feature_index_to_name = {
    0: 'arbitration_id',
    1: 'inter_arrival_time',
    10: 'data_entropy',
    11: 'dls',
    -1:'none'
}

# H√†m ƒë·ªçc LUT t·ª´ file CSV
def load_tree_from_csv(csv_path):
    df = pd.read_csv(csv_path)
    df.columns = df.columns.str.strip()  # X√≥a kho·∫£ng tr·∫Øng
    return df

# H√†m d·ª± ƒëo√°n gi·ªëng random forest d·ª±a tr√™n c√¢y
def predict_from_tree(tree_df, input_data, verbose=False):
    node = 0
    while True:
        matches = tree_df[tree_df['Node'] == node]
        if matches.empty:
            if verbose:
                print(f"‚ùå Node {node} kh√¥ng t·ªìn t·∫°i.")
            return None
        row = matches.iloc[0]
        
        # Ki·ªÉm tra n·∫øu l√† n√∫t l√° (Feature l√† NaN ho·∫∑c -1)
        is_leaf = pd.isna(row['Feature']) or row['Feature'] == -1
        feature_name = None if is_leaf else feature_index_to_name.get(row['Feature'], "-1")
        
        if is_leaf:
            # N·∫øu l√† n√∫t l√°, tr·∫£ v·ªÅ prediction
            if verbose:
                print(f"‚úÖ Node {node} l√† node l√°. Prediction = {row['Prediction']}")
            return row['Prediction']

        # N·∫øu kh√¥ng ph·∫£i n√∫t l√°, ti·∫øp t·ª•c so s√°nh
        threshold = row['Threshold']   # Fixed-point Q12.20
        feature_value = input_data[feature_name]

        if verbose:
            print(f"üß† Node {node}: {feature_name} ({feature_value:.5f}) "
                  f"{'<= ' if feature_value <= threshold else '>  '} {threshold}")

        if feature_value <= threshold:
            node = row['Left_Child']
        else:
            node = row['Right_Child']

# H√†m th·ª±c hi·ªán voting t·ª´ c√°c c√¢y
def vote_predictions(trees, input_data, verbose=False):
    predictions = []
    for tree_path in trees:
        tree_df = load_tree_from_csv(tree_path)
        print(f"\n=>{tree_path}")
        pred = predict_from_tree(tree_df, input_data, verbose=verbose)
        predictions.append(pred)

    # Th·ª±c hi·ªán voting (b·ªè phi·∫øu), n·∫øu phi·∫øu 0 nhi·ªÅu h∆°n, d·ª± ƒëo√°n l√† 0, ng∆∞·ª£c l·∫°i l√† 1
    prediction_counts = Counter(predictions)
    voted_prediction = prediction_counts.most_common(1)[0][0]  # L·∫•y d·ª± ƒëo√°n ph·ªï bi·∫øn nh·∫•t

    return voted_prediction, prediction_counts

# Main ch·∫°y nh∆∞ b·∫°n y√™u c·∫ßu
if __name__ == "__main__":
    # C√°c c√¢y m√† b·∫°n mu·ªën d·ª± ƒëo√°n (tree_0 ƒë·∫øn tree_16)
    trees = [f"src/LUT/tree_{i}.csv" for i in range(49)]

    # D·ªØ li·ªáu ƒë·∫ßu v√†o
    sample_input = {
   'arbitration_id': 882, 'inter_arrival_time': 0.099141, 'data_entropy': 0.54356, 'dls': 8
    }
    # Th·ª±c hi·ªán voting v√† l·∫•y k·∫øt qu·∫£
    voted_prediction, prediction_counts = vote_predictions(trees, sample_input, verbose=True)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print(f"\nüßæ Final Voted Prediction: {voted_prediction} (0: Normal, 1: Attack)")
    print(f"Votes: {prediction_counts}")
